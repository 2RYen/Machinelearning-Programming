{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Q6-leJrfpZfVE3tPBJ2VITXWOygFTSOF","timestamp":1745034099836}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n","from sklearn.linear_model import SGDRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","from sklearn.preprocessing import StandardScaler"],"metadata":{"id":"1jhq_EcG45gI","executionInfo":{"status":"ok","timestamp":1745032689993,"user_tz":-540,"elapsed":3036,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# help(SGDRegressor)\n","help(StandardScaler)"],"metadata":{"id":"ewPmeTPkGXDF","executionInfo":{"status":"ok","timestamp":1745033501035,"user_tz":-540,"elapsed":15,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"de3001eb-e7f7-49ea-8379-69ffadec6eb4","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on class StandardScaler in module sklearn.preprocessing._data:\n","\n","class StandardScaler(sklearn.base.OneToOneFeatureMixin, sklearn.base.TransformerMixin, sklearn.base.BaseEstimator)\n"," |  StandardScaler(*, copy=True, with_mean=True, with_std=True)\n"," |  \n"," |  Standardize features by removing the mean and scaling to unit variance.\n"," |  \n"," |  The standard score of a sample `x` is calculated as:\n"," |  \n"," |  .. code-block:: text\n"," |  \n"," |      z = (x - u) / s\n"," |  \n"," |  where `u` is the mean of the training samples or zero if `with_mean=False`,\n"," |  and `s` is the standard deviation of the training samples or one if\n"," |  `with_std=False`.\n"," |  \n"," |  Centering and scaling happen independently on each feature by computing\n"," |  the relevant statistics on the samples in the training set. Mean and\n"," |  standard deviation are then stored to be used on later data using\n"," |  :meth:`transform`.\n"," |  \n"," |  Standardization of a dataset is a common requirement for many\n"," |  machine learning estimators: they might behave badly if the\n"," |  individual features do not more or less look like standard normally\n"," |  distributed data (e.g. Gaussian with 0 mean and unit variance).\n"," |  \n"," |  For instance many elements used in the objective function of\n"," |  a learning algorithm (such as the RBF kernel of Support Vector\n"," |  Machines or the L1 and L2 regularizers of linear models) assume that\n"," |  all features are centered around 0 and have variance in the same\n"," |  order. If a feature has a variance that is orders of magnitude larger\n"," |  than others, it might dominate the objective function and make the\n"," |  estimator unable to learn from other features correctly as expected.\n"," |  \n"," |  `StandardScaler` is sensitive to outliers, and the features may scale\n"," |  differently from each other in the presence of outliers. For an example\n"," |  visualization, refer to :ref:`Compare StandardScaler with other scalers\n"," |  <plot_all_scaling_standard_scaler_section>`.\n"," |  \n"," |  This scaler can also be applied to sparse CSR or CSC matrices by passing\n"," |  `with_mean=False` to avoid breaking the sparsity structure of the data.\n"," |  \n"," |  Read more in the :ref:`User Guide <preprocessing_scaler>`.\n"," |  \n"," |  Parameters\n"," |  ----------\n"," |  copy : bool, default=True\n"," |      If False, try to avoid a copy and do inplace scaling instead.\n"," |      This is not guaranteed to always work inplace; e.g. if the data is\n"," |      not a NumPy array or scipy.sparse CSR matrix, a copy may still be\n"," |      returned.\n"," |  \n"," |  with_mean : bool, default=True\n"," |      If True, center the data before scaling.\n"," |      This does not work (and will raise an exception) when attempted on\n"," |      sparse matrices, because centering them entails building a dense\n"," |      matrix which in common use cases is likely to be too large to fit in\n"," |      memory.\n"," |  \n"," |  with_std : bool, default=True\n"," |      If True, scale the data to unit variance (or equivalently,\n"," |      unit standard deviation).\n"," |  \n"," |  Attributes\n"," |  ----------\n"," |  scale_ : ndarray of shape (n_features,) or None\n"," |      Per feature relative scaling of the data to achieve zero mean and unit\n"," |      variance. Generally this is calculated using `np.sqrt(var_)`. If a\n"," |      variance is zero, we can't achieve unit variance, and the data is left\n"," |      as-is, giving a scaling factor of 1. `scale_` is equal to `None`\n"," |      when `with_std=False`.\n"," |  \n"," |      .. versionadded:: 0.17\n"," |         *scale_*\n"," |  \n"," |  mean_ : ndarray of shape (n_features,) or None\n"," |      The mean value for each feature in the training set.\n"," |      Equal to ``None`` when ``with_mean=False`` and ``with_std=False``.\n"," |  \n"," |  var_ : ndarray of shape (n_features,) or None\n"," |      The variance for each feature in the training set. Used to compute\n"," |      `scale_`. Equal to ``None`` when ``with_mean=False`` and\n"," |      ``with_std=False``.\n"," |  \n"," |  n_features_in_ : int\n"," |      Number of features seen during :term:`fit`.\n"," |  \n"," |      .. versionadded:: 0.24\n"," |  \n"," |  feature_names_in_ : ndarray of shape (`n_features_in_`,)\n"," |      Names of features seen during :term:`fit`. Defined only when `X`\n"," |      has feature names that are all strings.\n"," |  \n"," |      .. versionadded:: 1.0\n"," |  \n"," |  n_samples_seen_ : int or ndarray of shape (n_features,)\n"," |      The number of samples processed by the estimator for each feature.\n"," |      If there are no missing samples, the ``n_samples_seen`` will be an\n"," |      integer, otherwise it will be an array of dtype int. If\n"," |      `sample_weights` are used it will be a float (if no missing data)\n"," |      or an array of dtype float that sums the weights seen so far.\n"," |      Will be reset on new calls to fit, but increments across\n"," |      ``partial_fit`` calls.\n"," |  \n"," |  See Also\n"," |  --------\n"," |  scale : Equivalent function without the estimator API.\n"," |  \n"," |  :class:`~sklearn.decomposition.PCA` : Further removes the linear\n"," |      correlation across features with 'whiten=True'.\n"," |  \n"," |  Notes\n"," |  -----\n"," |  NaNs are treated as missing values: disregarded in fit, and maintained in\n"," |  transform.\n"," |  \n"," |  We use a biased estimator for the standard deviation, equivalent to\n"," |  `numpy.std(x, ddof=0)`. Note that the choice of `ddof` is unlikely to\n"," |  affect model performance.\n"," |  \n"," |  Examples\n"," |  --------\n"," |  >>> from sklearn.preprocessing import StandardScaler\n"," |  >>> data = [[0, 0], [0, 0], [1, 1], [1, 1]]\n"," |  >>> scaler = StandardScaler()\n"," |  >>> print(scaler.fit(data))\n"," |  StandardScaler()\n"," |  >>> print(scaler.mean_)\n"," |  [0.5 0.5]\n"," |  >>> print(scaler.transform(data))\n"," |  [[-1. -1.]\n"," |   [-1. -1.]\n"," |   [ 1.  1.]\n"," |   [ 1.  1.]]\n"," |  >>> print(scaler.transform([[2, 2]]))\n"," |  [[3. 3.]]\n"," |  \n"," |  Method resolution order:\n"," |      StandardScaler\n"," |      sklearn.base.OneToOneFeatureMixin\n"," |      sklearn.base.TransformerMixin\n"," |      sklearn.utils._set_output._SetOutputMixin\n"," |      sklearn.base.BaseEstimator\n"," |      sklearn.utils._estimator_html_repr._HTMLDocumentationLinkMixin\n"," |      sklearn.utils._metadata_requests._MetadataRequester\n"," |      builtins.object\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __init__(self, *, copy=True, with_mean=True, with_std=True)\n"," |      Initialize self.  See help(type(self)) for accurate signature.\n"," |  \n"," |  __sklearn_tags__(self)\n"," |  \n"," |  fit(self, X, y=None, sample_weight=None)\n"," |      Compute the mean and std to be used for later scaling.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : {array-like, sparse matrix} of shape (n_samples, n_features)\n"," |          The data used to compute the mean and standard deviation\n"," |          used for later scaling along the features axis.\n"," |      \n"," |      y : None\n"," |          Ignored.\n"," |      \n"," |      sample_weight : array-like of shape (n_samples,), default=None\n"," |          Individual weights for each sample.\n"," |      \n"," |          .. versionadded:: 0.24\n"," |             parameter *sample_weight* support to StandardScaler.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |          Fitted scaler.\n"," |  \n"," |  inverse_transform(self, X, copy=None)\n"," |      Scale back the data to the original representation.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : {array-like, sparse matrix} of shape (n_samples, n_features)\n"," |          The data used to scale along the features axis.\n"," |      copy : bool, default=None\n"," |          Copy the input X or not.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      X_tr : {ndarray, sparse matrix} of shape (n_samples, n_features)\n"," |          Transformed array.\n"," |  \n"," |  partial_fit(self, X, y=None, sample_weight=None)\n"," |      Online computation of mean and std on X for later scaling.\n"," |      \n"," |      All of X is processed as a single batch. This is intended for cases\n"," |      when :meth:`fit` is not feasible due to very large number of\n"," |      `n_samples` or because X is read from a continuous stream.\n"," |      \n"," |      The algorithm for incremental mean and std is given in Equation 1.5a,b\n"," |      in Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. \"Algorithms\n"," |      for computing the sample variance: Analysis and recommendations.\"\n"," |      The American Statistician 37.3 (1983): 242-247:\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : {array-like, sparse matrix} of shape (n_samples, n_features)\n"," |          The data used to compute the mean and standard deviation\n"," |          used for later scaling along the features axis.\n"," |      \n"," |      y : None\n"," |          Ignored.\n"," |      \n"," |      sample_weight : array-like of shape (n_samples,), default=None\n"," |          Individual weights for each sample.\n"," |      \n"," |          .. versionadded:: 0.24\n"," |             parameter *sample_weight* support to StandardScaler.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |          Fitted scaler.\n"," |  \n"," |  set_fit_request(self: sklearn.preprocessing._data.StandardScaler, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.preprocessing._data.StandardScaler from sklearn.utils._metadata_requests.RequestMethod.__get__.<locals>\n"," |      Request metadata passed to the ``fit`` method.\n"," |      \n"," |      Note that this method is only relevant if\n"," |      ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n"," |      Please see :ref:`User Guide <metadata_routing>` on how the routing\n"," |      mechanism works.\n"," |      \n"," |      The options for each parameter are:\n"," |      \n"," |      - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n"," |      \n"," |      - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n"," |      \n"," |      - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n"," |      \n"," |      - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n"," |      \n"," |      The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n"," |      existing request. This allows you to change the request for some\n"," |      parameters and not others.\n"," |      \n"," |      .. versionadded:: 1.3\n"," |      \n"," |      .. note::\n"," |          This method is only relevant if this estimator is used as a\n"," |          sub-estimator of a meta-estimator, e.g. used inside a\n"," |          :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n"," |          Metadata routing for ``sample_weight`` parameter in ``fit``.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |          The updated object.\n"," |  \n"," |  set_inverse_transform_request(self: sklearn.preprocessing._data.StandardScaler, *, copy: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.preprocessing._data.StandardScaler from sklearn.utils._metadata_requests.RequestMethod.__get__.<locals>\n"," |      Request metadata passed to the ``inverse_transform`` method.\n"," |      \n"," |      Note that this method is only relevant if\n"," |      ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n"," |      Please see :ref:`User Guide <metadata_routing>` on how the routing\n"," |      mechanism works.\n"," |      \n"," |      The options for each parameter are:\n"," |      \n"," |      - ``True``: metadata is requested, and passed to ``inverse_transform`` if provided. The request is ignored if metadata is not provided.\n"," |      \n"," |      - ``False``: metadata is not requested and the meta-estimator will not pass it to ``inverse_transform``.\n"," |      \n"," |      - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n"," |      \n"," |      - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n"," |      \n"," |      The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n"," |      existing request. This allows you to change the request for some\n"," |      parameters and not others.\n"," |      \n"," |      .. versionadded:: 1.3\n"," |      \n"," |      .. note::\n"," |          This method is only relevant if this estimator is used as a\n"," |          sub-estimator of a meta-estimator, e.g. used inside a\n"," |          :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      copy : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n"," |          Metadata routing for ``copy`` parameter in ``inverse_transform``.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |          The updated object.\n"," |  \n"," |  set_partial_fit_request(self: sklearn.preprocessing._data.StandardScaler, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.preprocessing._data.StandardScaler from sklearn.utils._metadata_requests.RequestMethod.__get__.<locals>\n"," |      Request metadata passed to the ``partial_fit`` method.\n"," |      \n"," |      Note that this method is only relevant if\n"," |      ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n"," |      Please see :ref:`User Guide <metadata_routing>` on how the routing\n"," |      mechanism works.\n"," |      \n"," |      The options for each parameter are:\n"," |      \n"," |      - ``True``: metadata is requested, and passed to ``partial_fit`` if provided. The request is ignored if metadata is not provided.\n"," |      \n"," |      - ``False``: metadata is not requested and the meta-estimator will not pass it to ``partial_fit``.\n"," |      \n"," |      - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n"," |      \n"," |      - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n"," |      \n"," |      The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n"," |      existing request. This allows you to change the request for some\n"," |      parameters and not others.\n"," |      \n"," |      .. versionadded:: 1.3\n"," |      \n"," |      .. note::\n"," |          This method is only relevant if this estimator is used as a\n"," |          sub-estimator of a meta-estimator, e.g. used inside a\n"," |          :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n"," |          Metadata routing for ``sample_weight`` parameter in ``partial_fit``.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |          The updated object.\n"," |  \n"," |  set_transform_request(self: sklearn.preprocessing._data.StandardScaler, *, copy: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.preprocessing._data.StandardScaler from sklearn.utils._metadata_requests.RequestMethod.__get__.<locals>\n"," |      Request metadata passed to the ``transform`` method.\n"," |      \n"," |      Note that this method is only relevant if\n"," |      ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n"," |      Please see :ref:`User Guide <metadata_routing>` on how the routing\n"," |      mechanism works.\n"," |      \n"," |      The options for each parameter are:\n"," |      \n"," |      - ``True``: metadata is requested, and passed to ``transform`` if provided. The request is ignored if metadata is not provided.\n"," |      \n"," |      - ``False``: metadata is not requested and the meta-estimator will not pass it to ``transform``.\n"," |      \n"," |      - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n"," |      \n"," |      - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n"," |      \n"," |      The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n"," |      existing request. This allows you to change the request for some\n"," |      parameters and not others.\n"," |      \n"," |      .. versionadded:: 1.3\n"," |      \n"," |      .. note::\n"," |          This method is only relevant if this estimator is used as a\n"," |          sub-estimator of a meta-estimator, e.g. used inside a\n"," |          :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      copy : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n"," |          Metadata routing for ``copy`` parameter in ``transform``.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : object\n"," |          The updated object.\n"," |  \n"," |  transform(self, X, copy=None)\n"," |      Perform standardization by centering and scaling.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : {array-like, sparse matrix of shape (n_samples, n_features)\n"," |          The data used to scale along the features axis.\n"," |      copy : bool, default=None\n"," |          Copy the input X or not.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      X_tr : {ndarray, sparse matrix} of shape (n_samples, n_features)\n"," |          Transformed array.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes defined here:\n"," |  \n"," |  __annotations__ = {'_parameter_constraints': <class 'dict'>}\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.base.OneToOneFeatureMixin:\n"," |  \n"," |  get_feature_names_out(self, input_features=None)\n"," |      Get output feature names for transformation.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      input_features : array-like of str or None, default=None\n"," |          Input features.\n"," |      \n"," |          - If `input_features` is `None`, then `feature_names_in_` is\n"," |            used as feature names in. If `feature_names_in_` is not defined,\n"," |            then the following input feature names are generated:\n"," |            `[\"x0\", \"x1\", ..., \"x(n_features_in_ - 1)\"]`.\n"," |          - If `input_features` is an array-like, then `input_features` must\n"," |            match `feature_names_in_` if `feature_names_in_` is defined.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      feature_names_out : ndarray of str objects\n"," |          Same as input features.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from sklearn.base.OneToOneFeatureMixin:\n"," |  \n"," |  __dict__\n"," |      dictionary for instance variables\n"," |  \n"," |  __weakref__\n"," |      list of weak references to the object\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.base.TransformerMixin:\n"," |  \n"," |  fit_transform(self, X, y=None, **fit_params)\n"," |      Fit to data, then transform it.\n"," |      \n"," |      Fits transformer to `X` and `y` with optional parameters `fit_params`\n"," |      and returns a transformed version of `X`.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      X : array-like of shape (n_samples, n_features)\n"," |          Input samples.\n"," |      \n"," |      y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None\n"," |          Target values (None for unsupervised transformations).\n"," |      \n"," |      **fit_params : dict\n"," |          Additional fit parameters.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      X_new : ndarray array of shape (n_samples, n_features_new)\n"," |          Transformed array.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.utils._set_output._SetOutputMixin:\n"," |  \n"," |  set_output(self, *, transform=None)\n"," |      Set output container.\n"," |      \n"," |      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n"," |      for an example on how to use the API.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      transform : {\"default\", \"pandas\", \"polars\"}, default=None\n"," |          Configure output of `transform` and `fit_transform`.\n"," |      \n"," |          - `\"default\"`: Default output format of a transformer\n"," |          - `\"pandas\"`: DataFrame output\n"," |          - `\"polars\"`: Polars output\n"," |          - `None`: Transform configuration is unchanged\n"," |      \n"," |          .. versionadded:: 1.4\n"," |              `\"polars\"` option was added.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : estimator instance\n"," |          Estimator instance.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Class methods inherited from sklearn.utils._set_output._SetOutputMixin:\n"," |  \n"," |  __init_subclass__(auto_wrap_output_keys=('transform',), **kwargs)\n"," |      This method is called when a class is subclassed.\n"," |      \n"," |      The default implementation does nothing. It may be\n"," |      overridden to extend subclasses.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.base.BaseEstimator:\n"," |  \n"," |  __getstate__(self)\n"," |      Helper for pickle.\n"," |  \n"," |  __repr__(self, N_CHAR_MAX=700)\n"," |      Return repr(self).\n"," |  \n"," |  __setstate__(self, state)\n"," |  \n"," |  __sklearn_clone__(self)\n"," |  \n"," |  get_params(self, deep=True)\n"," |      Get parameters for this estimator.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      deep : bool, default=True\n"," |          If True, will return the parameters for this estimator and\n"," |          contained subobjects that are estimators.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      params : dict\n"," |          Parameter names mapped to their values.\n"," |  \n"," |  set_params(self, **params)\n"," |      Set the parameters of this estimator.\n"," |      \n"," |      The method works on simple estimators as well as on nested objects\n"," |      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n"," |      parameters of the form ``<component>__<parameter>`` so that it's\n"," |      possible to update each component of a nested object.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      **params : dict\n"," |          Estimator parameters.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      self : estimator instance\n"," |          Estimator instance.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from sklearn.utils._metadata_requests._MetadataRequester:\n"," |  \n"," |  get_metadata_routing(self)\n"," |      Get metadata routing of this object.\n"," |      \n"," |      Please check :ref:`User Guide <metadata_routing>` on how the routing\n"," |      mechanism works.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      routing : MetadataRequest\n"," |          A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n"," |          routing information.\n","\n"]}]},{"cell_type":"code","source":["np.random.seed(0)\n","X = np.random.rand(100, 5)  # 100개의 샘플, 5개의 특징\n","y = 2 * X[:, 0] + 3 * X[:, 1] + (-1) * X[:, 2] + 0 * X[:,3] + 0 * X[:,4] + np.random.randn(100) # 선형 관계 + 노이즈"],"metadata":{"id":"rI_okTwW47Av","executionInfo":{"status":"ok","timestamp":1745032709213,"user_tz":-540,"elapsed":6,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["X_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.2, random_state=2025)\n","print(\"X_tr.shape:\", X_tr.shape)\n","print(\"X_te.shape:\", X_te.shape)\n","print(\"y_tr.shape:\", y_tr.shape)\n","print(\"y_te.shape:\", y_te.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E74DQdTy49Og","executionInfo":{"status":"ok","timestamp":1745032788697,"user_tz":-540,"elapsed":51,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"d5989e2d-9b31-49ab-d34b-5178ecfad7bc"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["X_tr.shape: (80, 5)\n","X_te.shape: (20, 5)\n","y_tr.shape: (80,)\n","y_te.shape: (20,)\n"]}]},{"cell_type":"code","source":["scaler_X = StandardScaler().fit(X_tr)\n","X_norm_tr = scaler_X.transform(X_tr)\n","X_norm_te = scaler_X.transform(X_te)"],"metadata":{"id":"kBROwMyZ4_Lc","executionInfo":{"status":"ok","timestamp":1745032950383,"user_tz":-540,"elapsed":6,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["models = {\n","    'Linear Regression': LinearRegression(),\n","    'Ridge': Ridge(alpha=1.0),\n","    'Lasso': Lasso(alpha=1.0),\n","    'Elastic Net': ElasticNet(alpha=1.0, l1_ratio=0.5),\n","    'SGD Regressor': SGDRegressor(max_iter=1000, tol=1e-3)\n","}"],"metadata":{"id":"K2_8rZ3c5CkF","executionInfo":{"status":"ok","timestamp":1745032952169,"user_tz":-540,"elapsed":6,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["for name, model in models.items():\n","    _ = model.fit(X_norm_tr, y_tr)"],"metadata":{"id":"6AdW0TbQ5Xqy","executionInfo":{"status":"ok","timestamp":1745032954106,"user_tz":-540,"elapsed":55,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["predictions = dict()\n","for name, model in models.items():\n","    predictions[name] = model.predict(X_norm_te)"],"metadata":{"id":"F0jXkZhE5ZEM","executionInfo":{"status":"ok","timestamp":1745032955913,"user_tz":-540,"elapsed":64,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# help(dict)"],"metadata":{"id":"x3cvORVVIUkC","executionInfo":{"status":"ok","timestamp":1745033983566,"user_tz":-540,"elapsed":7,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["predictions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o7RFO7ZeLBp8","executionInfo":{"status":"ok","timestamp":1745032957277,"user_tz":-540,"elapsed":22,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"518cd312-0ea2-4c00-ac41-ad849200a116"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Linear Regression': array([2.03877901, 3.63085708, 0.98322598, 1.11103334, 2.46739344,\n","        2.72318191, 0.80293607, 2.05673076, 2.71332513, 1.1432703 ,\n","        0.99073523, 2.08714626, 2.47280778, 1.17912549, 2.19936386,\n","        1.45359818, 0.10108235, 1.94864364, 2.55728388, 1.71442973]),\n"," 'Ridge': array([2.03372879, 3.60614612, 0.9947492 , 1.12391817, 2.46012573,\n","        2.71819829, 0.81621481, 2.05441141, 2.70473333, 1.15639189,\n","        1.00129916, 2.09263864, 2.4668766 , 1.19347726, 2.19770991,\n","        1.45867304, 0.1330299 , 1.9535088 , 2.54339324, 1.72115122]),\n"," 'Lasso': array([1.95388227, 1.95388227, 1.95388227, 1.95388227, 1.95388227,\n","        1.95388227, 1.95388227, 1.95388227, 1.95388227, 1.95388227,\n","        1.95388227, 1.95388227, 1.95388227, 1.95388227, 1.95388227,\n","        1.95388227, 1.95388227, 1.95388227, 1.95388227, 1.95388227]),\n"," 'Elastic Net': array([1.97967504, 2.09035112, 1.78809199, 1.9590596 , 2.0720793 ,\n","        2.03904115, 1.81666421, 1.98900857, 1.96351128, 1.79290029,\n","        1.85903124, 2.09010449, 2.16394514, 1.91556151, 2.12949676,\n","        1.93100763, 1.7727616 , 1.92310553, 1.88672202, 1.84894788]),\n"," 'SGD Regressor': array([1.96182379, 3.51982981, 0.96503166, 1.10809393, 2.41122582,\n","        2.70766439, 0.77896124, 2.00868396, 2.66801439, 1.15134199,\n","        0.96322874, 2.10460835, 2.42373173, 1.1974943 , 2.16275754,\n","        1.41523562, 0.18024115, 1.95355574, 2.4510152 , 1.71664899])}"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["results = []\n","for name, p_te in predictions.items():\n","    mse = mean_squared_error(y_te, p_te)\n","    r2 = r2_score(y_te, p_te)\n","    results.append({'Model':name, 'MSE':mse, 'R2':r2})\n","df_res = pd.DataFrame(results)\n","print(df_res)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MtEOdI2Z5gY3","executionInfo":{"status":"ok","timestamp":1745033406016,"user_tz":-540,"elapsed":27,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"585ecc55-49fa-4b8f-afca-fd608c7f2611"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["               Model       MSE        R2\n","0  Linear Regression  1.525408  0.475451\n","1              Ridge  1.534963  0.472165\n","2              Lasso  2.912285 -0.001461\n","3        Elastic Net  2.702193  0.070784\n","4      SGD Regressor  1.567392  0.461013\n"]}]},{"cell_type":"code","source":["# help(pd.DataFrame)"],"metadata":{"id":"jxI59mH6Idsn","executionInfo":{"status":"ok","timestamp":1745034032153,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["results"],"metadata":{"id":"eL409njuLaVZ","executionInfo":{"status":"ok","timestamp":1745033409650,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"0cb00698-029a-4c25-ebad-fb1abc489f30","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'Model': 'Linear Regression',\n","  'MSE': 1.5254078318852349,\n","  'R2': 0.47545074176972413},\n"," {'Model': 'Ridge', 'MSE': 1.5349629339102566, 'R2': 0.47216498331564216},\n"," {'Model': 'Lasso', 'MSE': 2.912284608391433, 'R2': -0.001461182482055401},\n"," {'Model': 'Elastic Net', 'MSE': 2.7021925531965, 'R2': 0.07078417342147159},\n"," {'Model': 'SGD Regressor',\n","  'MSE': 1.5673921679977785,\n","  'R2': 0.46101338809630843}]"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"9_fJwU9Q5iQ3","executionInfo":{"status":"ok","timestamp":1745033411860,"user_tz":-540,"elapsed":877,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(2, 1, figsize=(4,4))\n","_ = sns.barplot(df_res, x='MSE', y='Model', ax=ax[0])\n","_ = sns.barplot(df_res, x='R2', y='Model', ax=ax[1])\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":388},"id":"f6ntL0c36AAi","executionInfo":{"status":"ok","timestamp":1745033414845,"user_tz":-540,"elapsed":590,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"ef0f7360-b9f5-42ff-f9fe-e48cb394863d"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["fig, ax = plt.subplots(2, 1, figsize=(4,4))\n","_ = sns.barplot(df_res, x='MSE', y='Model', ax=ax[0])\n","_ = sns.barplot(df_res, x='R2', y='Model', ax=ax[1])\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"RRBOTfeo6E-b","executionInfo":{"status":"ok","timestamp":1745033416341,"user_tz":-540,"elapsed":236,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"colab":{"base_uri":"https://localhost:8080/","height":407},"outputId":"5c1ed7f5-b185-449f-91da-a652956084d7"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["type(ax)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hwXssNvg4jle","executionInfo":{"status":"ok","timestamp":1745033418490,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"d30f1518-8f2b-4827-f7b6-6f0600ec9d61"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["ax"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RgbRBbvz4ypP","executionInfo":{"status":"ok","timestamp":1745033421072,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"6a84126e-46c7-4b20-dff8-97235ae774da"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([<Axes: xlabel='MSE', ylabel='Model'>,\n","       <Axes: xlabel='R2', ylabel='Model'>], dtype=object)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["type(ax)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TjBprZlv4tzW","executionInfo":{"status":"ok","timestamp":1745033421918,"user_tz":-540,"elapsed":8,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"fab0ab05-e0a2-4da2-faa1-da7529d03fa6"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["ax"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Dvv6XmY49Z4","executionInfo":{"status":"ok","timestamp":1745033424700,"user_tz":-540,"elapsed":12,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"aed83d7d-ed30-4357-fd3c-8ed3ed7e9241"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([<Axes: xlabel='MSE', ylabel='Model'>,\n","       <Axes: xlabel='R2', ylabel='Model'>], dtype=object)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["fig, ax = plt.subplots(3,2 )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":435},"id":"A2Y5zeDu3_yX","executionInfo":{"status":"ok","timestamp":1745033426400,"user_tz":-540,"elapsed":676,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"dd315da8-93cb-47f5-ef0b-e4c84cc0813d"},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 6 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAi4AAAGiCAYAAADA0E3hAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAL3pJREFUeJzt3X1sVPWex/FPW5gpJG3By6UPOMACFxAEqkVKQZZomjQXFmGTDV0xpRJACdVdaSJSUXoFLyVclssGiyiKuJEroAtqoEG9VeLyYMhCmyAPGmilJcsU2WunPEhL29/+4TL3lrbIGebpR9+v5Pwxh3PmfKblfPPpdE5PjDHGCAAAwAKxkQ4AAABwuyguAADAGhQXAABgDYoLAACwBsUFAABYg+ICAACsQXEBAADWoLgAAABrUFwAAIA1KC4AAMAajovLV199pWnTpiktLU0xMTH66KOPfnGfffv26cEHH5Tb7daQIUO0ZcuWAKICsBVzA0CwOC4uV65c0ZgxY1RaWnpb21dXV2vq1Kl65JFHVFlZqeeee07z5s3Tp59+6jgsADsxNwAES8yd3GQxJiZGu3bt0owZMzrd5oUXXtCePXv0zTff+Nf98z//s+rr67V3795ADw3AUswNAHeiW6gPcOjQIWVnZ7dZl5OTo+eee67TfRobG9XY2Oh/3Nraqr/85S/61a9+pZiYmFBFBdAJY4wuXbqktLQ0xcaG/qNxzA3g7hCK2RHy4uL1epWcnNxmXXJyshoaGvTTTz+pR48e7fYpKSnRK6+8EupoAByqra3VvffeG/LjMDeAu0swZ0fIi0sgioqKVFhY6H/s8/nUv39/1dbWKjExMYLJgK6poaFBHo9HCQkJkY7SKeYGEH1CMTtCXlxSUlJUV1fXZl1dXZ0SExM7/KlJktxut9xud7v1iYmJDCAggsL1KxfmBnB3CebsCPkvq7OyslReXt5m3eeff66srKxQHxqApZgbADrjuLhcvnxZlZWVqqyslPTzZYuVlZWqqamR9PPbtbNnz/Zvv2DBAlVVVWnx4sU6deqUNmzYoB07dmjRokXBeQUAoh5zA0DQGIe+/PJLI6ndkp+fb4wxJj8/30yePLndPunp6cblcplBgwaZd955x9ExfT6fkWR8Pp/TuACC4E7PQeYG0DWF4jy8o7/jEi4NDQ1KSkqSz+fjd9VABNh4DtqYGbjbhOI85F5FAADAGhQXAABgDYoLAACwBsUFAABYg+ICAACsQXEBAADWoLgAAABrUFwAAIA1KC4AAMAaFBcAAGANigsAALAGxQUAAFiD4gIAAKxBcQEAANaguAAAAGtQXAAAgDUoLgAAwBoUFwAAYA2KCwAAsAbFBQAAWIPiAgAArEFxAQAA1qC4AAAAa1BcAACANSguAADAGhQXAABgDYoLAACwBsUFAABYg+ICAACsQXEBAADWoLgAAABrUFwAAIA1KC4AAMAaFBcAAGANigsAALAGxQUAAFiD4gIAAKxBcQEAANaguAAAAGtQXAAAgDUoLgAAwBoUFwAAYA2KCwAAsEZAxaW0tFQDBw5UfHy8MjMzdfjw4U633bJli2JiYtos8fHxAQcGYC9mB4A75bi4bN++XYWFhSouLtbRo0c1ZswY5eTk6MKFC53uk5iYqPPnz/uXs2fP3lFoAPZhdgAIBsfFZe3atZo/f77mzJmjESNGaOPGjerZs6c2b97c6T4xMTFKSUnxL8nJyXcUGoB9mB0AgsFRcWlqatKRI0eUnZ391yeIjVV2drYOHTrU6X6XL1/WgAED5PF4NH36dB0/fvyWx2lsbFRDQ0ObBYC9wjE7mBtA1+CouFy8eFEtLS3tfupJTk6W1+vtcJ9hw4Zp8+bN+vjjj/Xee++ptbVVEyZM0Llz5zo9TklJiZKSkvyLx+NxEhNAlAnH7GBuAF1DyK8qysrK0uzZs5Wenq7Jkydr586d+vWvf6033nij032Kiork8/n8S21tbahjAogyTmcHcwPoGro52bhPnz6Ki4tTXV1dm/V1dXVKSUm5refo3r27HnjgAZ0+fbrTbdxut9xut5NoAKJYOGYHcwPoGhy94+JyuZSRkaHy8nL/utbWVpWXlysrK+u2nqOlpUXHjh1Tamqqs6QArMXsABAsjt5xkaTCwkLl5+dr7NixGjdunNatW6crV65ozpw5kqTZs2erX79+KikpkSQtX75c48eP15AhQ1RfX68//OEPOnv2rObNmxfcVwIgqjE7AASD4+KSm5urH374QcuWLZPX61V6err27t3r/9BdTU2NYmP/+kbOjz/+qPnz58vr9ap3797KyMjQwYMHNWLEiOC9CgBRj9kBIBhijDEm0iF+SUNDg5KSkuTz+ZSYmBjpOECXY+M5aGNm4G4TivOQexUBAABrUFwAAIA1KC4AAMAaFBcAAGANigsAALAGxQUAAFiD4gIAAKxBcQEAANaguAAAAGtQXAAAgDUoLgAAwBoUFwAAYA2KCwAAsAbFBQAAWIPiAgAArEFxAQAA1qC4AAAAa1BcAACANSguAADAGhQXAABgDYoLAACwBsUFAABYg+ICAACsQXEBAADWoLgAAABrUFwAAIA1KC4AAMAaFBcAAGANigsAALAGxQUAAFiD4gIAAKxBcQEAANaguAAAAGtQXAAAgDUoLgAAwBoUFwAAYA2KCwAAsAbFBQAAWIPiAgAArEFxAQAA1qC4AAAAa1BcAACANSguAADAGhQXAABgjYCKS2lpqQYOHKj4+HhlZmbq8OHDt9z+gw8+0PDhwxUfH69Ro0aprKwsoLAA7MbsAHCnHBeX7du3q7CwUMXFxTp69KjGjBmjnJwcXbhwocPtDx48qMcff1xz585VRUWFZsyYoRkzZuibb7654/AA7MHsABAMMcYY42SHzMxMPfTQQ3rttdckSa2trfJ4PHr22We1ZMmSdtvn5ubqypUr2r17t3/d+PHjlZ6ero0bN3Z4jMbGRjU2Nvof+3w+9e/fX7W1tUpMTHQSF0AQNDQ0yOPxqL6+XklJSQE9R6hnB3MDiD7BmB3tGAcaGxtNXFyc2bVrV5v1s2fPNo899liH+3g8HvPHP/6xzbply5aZ0aNHd3qc4uJiI4mFhSXKljNnzjgZGWGdHcwNFpboXQKdHR3pJgcuXryolpYWJScnt1mfnJysU6dOdbiP1+vtcHuv19vpcYqKilRYWOh/XF9frwEDBqimpiZ4jS3EbrRMm37aI3N42Jj5xrsX99xzT0D7h2N2MDciw8bMkp25bcx8p7OjI46KS7i43W653e5265OSkqz5Zt2QmJhI5jAgc3jExkbvhYjMjciyMbNkZ24bMwdzdjh6pj59+iguLk51dXVt1tfV1SklJaXDfVJSUhxtD+Duw+wAECyOiovL5VJGRobKy8v961pbW1VeXq6srKwO98nKymqzvSR9/vnnnW4P4O7D7AAQNE4/FLNt2zbjdrvNli1bzIkTJ8xTTz1levXqZbxerzHGmLy8PLNkyRL/9gcOHDDdunUza9asMSdPnjTFxcWme/fu5tixY7d9zGvXrpni4mJz7do1p3EjhszhQebwCEbmcM+Orvp1DjcbMxtjZ24y/8xxcTHGmPXr15v+/fsbl8tlxo0bZ77++mv/v02ePNnk5+e32X7Hjh1m6NChxuVymZEjR5o9e/bcUWgAdmJ2ALhTjv+OCwAAQKRE7yUCAAAAN6G4AAAAa1BcAACANSguAADAGlFTXGy83b2TzJs2bdKkSZPUu3dv9e7dW9nZ2b/4GkPB6df5hm3btikmJkYzZswIbcAOOM1cX1+vgoICpaamyu12a+jQoWH//+E087p16zRs2DD16NFDHo9HixYt0rVr18KUVvrqq680bdo0paWlKSYmRh999NEv7rNv3z49+OCDcrvdGjJkiLZs2RLynDdjboQHcyN8bJodEZsbkb6syZif/76Dy+UymzdvNsePHzfz5883vXr1MnV1dR1uf+DAARMXF2dWr15tTpw4YV566SXHfxsm3JlnzZplSktLTUVFhTl58qR58sknTVJSkjl37lzUZr6hurra9OvXz0yaNMlMnz49PGH/n9PMjY2NZuzYsWbKlClm//79prq62uzbt89UVlZGbeatW7cat9tttm7daqqrq82nn35qUlNTzaJFi8KWuayszCxdutTs3LnTSGp3M8SbVVVVmZ49e5rCwkJz4sQJs379ehMXF2f27t0bnsCGuRGtmW9gboQ+d6RnR6TmRlQUl3HjxpmCggL/45aWFpOWlmZKSko63H7mzJlm6tSpbdZlZmaap59+OqQ5/5bTzDdrbm42CQkJ5t133w1VxHYCydzc3GwmTJhg3nrrLZOfnx/2AeQ08+uvv24GDRpkmpqawhWxHaeZCwoKzKOPPtpmXWFhoZk4cWJIc3bmdgbQ4sWLzciRI9usy83NNTk5OSFM1hZzIzyYG+Fj8+wI59yI+K+KmpqadOTIEWVnZ/vXxcbGKjs7W4cOHepwn0OHDrXZXpJycnI63T7YAsl8s6tXr+r69etBvWPmrQSaefny5erbt6/mzp0bjphtBJL5k08+UVZWlgoKCpScnKz7779fK1euVEtLS9RmnjBhgo4cOeJ/S7iqqkplZWWaMmVKWDIHwsZz0MbMN2Nu/DIb54bUNWZHsM7BiN8dOhy3uw+2QDLf7IUXXlBaWlq7b2KoBJJ5//79evvtt1VZWRmGhO0FkrmqqkpffPGFnnjiCZWVlen06dNauHChrl+/ruLi4qjMPGvWLF28eFEPP/ywjDFqbm7WggUL9OKLL4Y8b6A6OwcbGhr0008/qUePHiE9PnODudEZG+eG1DVmR7DmRsTfcemKVq1apW3btmnXrl2Kj4+PdJwOXbp0SXl5edq0aZP69OkT6Ti3rbW1VX379tWbb76pjIwM5ebmaunSpdq4cWOko3Vq3759WrlypTZs2KCjR49q586d2rNnj1asWBHpaIgizI3QsXFuSF13djguLsH+FLGNt7sPJPMNa9as0apVq/TZZ59p9OjRoYzZhtPMZ86c0ffff69p06apW7du6tatm/7jP/5Dn3zyibp166YzZ85EXWZJSk1N1dChQxUXF+dfd99998nr9aqpqSmkeaXAMr/88svKy8vTvHnzNGrUKP3jP/6jVq5cqZKSErW2toY8cyA6OwcTExM7/KmJucHcYG7cWleYHU7nRmccF5crV65ozJgxKi0tva3tq6urNXXqVD3yyCOqrKzUc889p3nz5unTTz+VZOft7gPJLEmrV6/WihUrtHfvXo0dOzYcUf2cZh4+fLiOHTumyspK//LYY4/5v48ejyfqMkvSxIkTdfr06TYn7XfffafU1FS5XK6ozHz16lXFxrY9FW8MUBOltxJzeg4yN5gbzI1b6wqzI2jnoKOP8t5EQfoUcbhvdx8MTjOvWrXKuFwu8+GHH5rz58/7l0uXLkVt5ptF4uoAp5lrampMQkKCeeaZZ8y3335rdu/ebfr27WteffXVqM1cXFxsEhISzPvvv2+qqqrMZ599ZgYPHmxmzpwZtsyXLl0yFRUVpqKiwkgya9euNRUVFebs2bPGGGOWLFli8vLy/NvfuKzx+eefNydPnjSlpaW3fVkjc4O5EWo2zo1Ackd6doRzbvytkH84t7NPET/33HP+x7m5ufrhhx+0bNkyeb1ejR49Wv/5n/+pHj16qKGhQadPn9bly5fl8/kUExOj+++/X2+99ZZWrFihoqIiDR48WH/605/Uv39/NTQ0hPolSZJ++9vfasWKFXrppZdUV1fXLnNVVZWam5v9eUpLS9XU1KR/+qd/avM8S5YsUVFRUVRmvllTU5OuX78etq9xIJmTkpK0c+dOLVmyRG+++abS0tL09NNPa+HChVH7f+Nf/uVf1NjYqBdffFH/8z//oz59+ui3v/2tXn755bBl/q//+i/9wz/8g/9xYWGhJOnxxx/Xxo0b9f3336u6ulqtra2KjY3V3/3d32nPnj1atGiR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\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"MO5iwxmp4YZn"},"execution_count":null,"outputs":[]}]}