{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1PH4l2tmTEJvkzDIB9Mlq8PFcex22a4d7","timestamp":1745038697985}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1. 라이브러리 불러오기"],"metadata":{"id":"KMmhp9I0Wvpc"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"MTLyiVO-WsGm","executionInfo":{"status":"ok","timestamp":1749743503527,"user_tz":-540,"elapsed":9948,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","from scipy.special import expit\n","from sklearn.linear_model import LinearRegression, LogisticRegression"]},{"cell_type":"code","source":["# help(expit)"],"metadata":{"id":"mneMrSRAY7FD","executionInfo":{"status":"ok","timestamp":1749743555636,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["# 2. 예제 데이터 생성하기"],"metadata":{"id":"rGOiOjKdW8V4"}},{"cell_type":"code","source":["np.random.seed(0)"],"metadata":{"id":"JWfHcPAZaLst","executionInfo":{"status":"ok","timestamp":1749743557353,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["n_samples = 100"],"metadata":{"id":"nGmZAqBZW7YO","executionInfo":{"status":"ok","timestamp":1749743630189,"user_tz":-540,"elapsed":6,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["X = np.random.normal(size=n_samples)\n","y = (X > 0).astype(float)"],"metadata":{"id":"DsndDG32XFX-","executionInfo":{"status":"ok","timestamp":1749743674721,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# help()"],"metadata":{"id":"s9Zs9LyeZtOk","executionInfo":{"status":"ok","timestamp":1749743676067,"user_tz":-540,"elapsed":5,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["(X > 0).astype(float)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vkZ6CqpYMtde","executionInfo":{"status":"ok","timestamp":1749743676770,"user_tz":-540,"elapsed":19,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"77ddcc81-1d3b-407f-c3a4-8bfd37bb4d46"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1., 1., 1., 1., 1., 0., 1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1.,\n","       0., 1., 0., 0., 1., 1., 0., 1., 0., 1., 0., 1., 1., 1., 1., 0., 0.,\n","       0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,\n","       1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,\n","       0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1.,\n","       1., 1., 0., 0., 1., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["X = np.array([-1, -2, 0, 3, 2])"],"metadata":{"id":"3XJBBQNPNAnl","executionInfo":{"status":"ok","timestamp":1749743677686,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CItkl60XN9Cr","executionInfo":{"status":"ok","timestamp":1749743678466,"user_tz":-540,"elapsed":32,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"89607e2e-d171-43fb-b284-06b441461a39"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-1, -2,  0,  3,  2])"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["X + 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bb9V65pYN9Aj","executionInfo":{"status":"ok","timestamp":1749743678990,"user_tz":-540,"elapsed":11,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"9e16e795-7323-4340-82bf-1e3e744a4e7c"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0, -1,  1,  4,  3])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2gJJQVMxN8-d","executionInfo":{"status":"ok","timestamp":1749743679955,"user_tz":-540,"elapsed":26,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"37920b24-1039-46dc-e828-898e75a62e54"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-1, -2,  0,  3,  2])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["X += 1"],"metadata":{"id":"m78mjmjBOCrb","executionInfo":{"status":"ok","timestamp":1749743741418,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JkjWl9ZLOCpE","executionInfo":{"status":"ok","timestamp":1749743745049,"user_tz":-540,"elapsed":9,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"1053da11-b6f5-40af-f39a-f76d8eabbd9d"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0, -1,  1,  4,  3])"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["X > 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EXgnWWkeNHH9","executionInfo":{"status":"ok","timestamp":1749743763933,"user_tz":-540,"elapsed":54,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"c2f96ed9-4887-4c6f-c41d-aeaa6ab42ba5"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False,  True,  True,  True])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["X[X > 0] *= 4"],"metadata":{"id":"LbTfAi84NJiN","executionInfo":{"status":"ok","timestamp":1749743764831,"user_tz":-540,"elapsed":5,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KrisCTNzNZnb","executionInfo":{"status":"ok","timestamp":1749743765463,"user_tz":-540,"elapsed":10,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"50f6b40d-655e-4d95-a815-93ddafb73a36"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0, -1,  4, 16, 12])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["X += 1"],"metadata":{"id":"gtmKmp2WNlAd","executionInfo":{"status":"ok","timestamp":1749743766897,"user_tz":-540,"elapsed":5,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fukd_i9TNt40","executionInfo":{"status":"ok","timestamp":1749743768544,"user_tz":-540,"elapsed":47,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"af039ae4-aa56-4358-9ea8-e8eb80b94d2f"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  0,  5, 17, 13])"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# X = X.astype(float)\n","X[X > 0] *= 4\n","X += 0.3 * np.random.normal(size=n_samples)\n","# X += 0.3 * np.random.normal(size=X.shape[0])"],"metadata":{"id":"cKSRd-8gXMEh","executionInfo":{"status":"error","timestamp":1749743772121,"user_tz":-540,"elapsed":142,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"0ae6e92f-6d11-4ae5-9a25-ca8646129d8f","colab":{"base_uri":"https://localhost:8080/","height":220}},"execution_count":19,"outputs":[{"output_type":"error","ename":"UFuncTypeError","evalue":"Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUFuncTypeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-77158161>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# X = X.astype(float)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mX\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m0.3\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_samples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;31m# X += 0.3 * np.random.normal(size=X.shape[0])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mUFuncTypeError\u001b[0m: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'"]}]},{"cell_type":"code","source":["# help(np.random.normal)"],"metadata":{"id":"ty4-yTNeZ2Vy","executionInfo":{"status":"ok","timestamp":1749743821515,"user_tz":-540,"elapsed":71,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["X + 1\n","\n","X += 1"],"metadata":{"id":"7RgGUN8ZNyHs","executionInfo":{"status":"ok","timestamp":1749743822229,"user_tz":-540,"elapsed":17,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["X = X[:, np.newaxis]"],"metadata":{"id":"7OjrAtzLXS3S","executionInfo":{"status":"ok","timestamp":1749743826975,"user_tz":-540,"elapsed":5,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# help(np.newaxis)"],"metadata":{"id":"JEvA_iYkZ-lv","executionInfo":{"status":"ok","timestamp":1749743828254,"user_tz":-540,"elapsed":4,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DPICT77YORu8","executionInfo":{"status":"ok","timestamp":1749743828831,"user_tz":-540,"elapsed":14,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"89de686b-3395-4ada-8ac2-dad2d2247127"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 5],\n","       [ 1],\n","       [21],\n","       [69],\n","       [53]])"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["X[:,np.newaxis]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FyNel1RtOUeM","executionInfo":{"status":"ok","timestamp":1749743846160,"user_tz":-540,"elapsed":19,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"4e424daa-fc9f-466c-f37e-db368dcd38a7"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[ 5]],\n","\n","       [[ 1]],\n","\n","       [[21]],\n","\n","       [[69]],\n","\n","       [[53]]])"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["X[np.newaxis,:]"],"metadata":{"id":"xd2N1F4fOtPz","executionInfo":{"status":"ok","timestamp":1749743873195,"user_tz":-540,"elapsed":33,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"45884216-e09d-452a-c403-a53caad48274","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[ 5],\n","        [ 1],\n","        [21],\n","        [69],\n","        [53]]])"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["# 3. 로지스틱 모델 훈련하기"],"metadata":{"id":"U5-j5qdxW8Io"}},{"cell_type":"code","source":["clf = LogisticRegression(C=1e5)"],"metadata":{"id":"Q0UI10sAXWy_","executionInfo":{"status":"ok","timestamp":1749743875583,"user_tz":-540,"elapsed":2,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["clf.fit(X, y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"oKY5_sf-XbRC","executionInfo":{"status":"error","timestamp":1749743879773,"user_tz":-540,"elapsed":33,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"f99ea8c4-c3e9-403c-bb0c-103889b50bc2"},"execution_count":28,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Found input variables with inconsistent numbers of samples: [5, 100]","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-804616002>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1220\u001b[0m             \u001b[0m_dtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat64\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1222\u001b[0;31m         X, y = validate_data(\n\u001b[0m\u001b[1;32m   1223\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1224\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mvalidate_data\u001b[0;34m(_estimator, X, y, reset, validate_separately, skip_check_array, **check_params)\u001b[0m\n\u001b[1;32m   2959\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2960\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2961\u001b[0;31m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2962\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2963\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1387\u001b[0m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmulti_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_numeric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1388\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1389\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    473\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 475\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    476\u001b[0m             \u001b[0;34m\"Found input variables with inconsistent numbers of samples: %r\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    477\u001b[0m             \u001b[0;34m%\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [5, 100]"]}]},{"cell_type":"code","source":["# help(clf.fit)"],"metadata":{"id":"TckgmmTWaFnl","executionInfo":{"status":"ok","timestamp":1749743884863,"user_tz":-540,"elapsed":41,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":["# 4. 선형 모델 훈련하기"],"metadata":{"id":"xAei-40xYSAf"}},{"cell_type":"code","source":["ols = LinearRegression()"],"metadata":{"id":"WzDLQGQzYU7p","executionInfo":{"status":"ok","timestamp":1749743886385,"user_tz":-540,"elapsed":5,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["ols.fit(X, y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"RO0Fwg0bYXLO","executionInfo":{"status":"error","timestamp":1749743887163,"user_tz":-540,"elapsed":53,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"e2341eaa-cdfa-428e-9148-90b827a5cdd8"},"execution_count":31,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Found input variables with inconsistent numbers of samples: [5, 100]","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-31-2392738173>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mols\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    599\u001b[0m         \u001b[0maccept_sparse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpositive\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"coo\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 601\u001b[0;31m         X, y = validate_data(\n\u001b[0m\u001b[1;32m    602\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    603\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mvalidate_data\u001b[0;34m(_estimator, X, y, reset, validate_separately, skip_check_array, **check_params)\u001b[0m\n\u001b[1;32m   2959\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2960\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2961\u001b[0;31m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2962\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2963\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1387\u001b[0m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmulti_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_numeric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1388\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1389\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    473\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 475\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    476\u001b[0m             \u001b[0;34m\"Found input variables with inconsistent numbers of samples: %r\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    477\u001b[0m             \u001b[0;34m%\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [5, 100]"]}]},{"cell_type":"markdown","source":["# 5. 그래프 그리기"],"metadata":{"id":"zDKRMKkXXco1"}},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(4, 3))\n","\n","# Scatter\n","ax.scatter(X.ravel(), y, label=\"Example Data\", color=\"black\", zorder=20)\n","\n","# Points for plotting regressions\n","X_test = np.linspace(-5, 10, 300)\n","\n","# Logistic regression\n","loss = expit(X_test * clf.coef_ + clf.intercept_).ravel()\n","ax.plot(X_test, loss,\n","      label=\"Logistic Regression\", color=\"red\", linewidth=3)\n","\n","# Linear regression\n","ax.plot(X_test, ols.coef_ * X_test + ols.intercept_,\n","        label=\"Linear Regresion Model\", linewidth=1)\n","\n","# Horizontal line\n","ax.axhline(0.5, color=\".5\")\n","\n","# Axis Label\n","plt.xlabel(\"X\")\n","plt.ylabel(\"y\")\n","\n","# Axis Range\n","plt.xlim(-4, 10)\n","plt.ylim(-.25, 1.25)\n","\n","# Legend\n","plt.legend(loc=\"lower right\", fontsize=\"small\")\n","\n","# Show\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":688},"id":"PWjvTQjOXbkf","executionInfo":{"status":"error","timestamp":1749743893765,"user_tz":-540,"elapsed":482,"user":{"displayName":"김민주","userId":"13715885916761677384"}},"outputId":"6bf189f5-cd81-451e-cd6d-40f65185fc13"},"execution_count":32,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"x and y must be the same size","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-2697676896>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Scatter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Example Data\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"black\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzorder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Points for plotting regressions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/_api/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    451\u001b[0m                 \u001b[0;34m\"parameter will become keyword-only in %(removal)s.\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    452\u001b[0m                 name=name, obj_type=f\"parameter of {func.__name__}()\")\n\u001b[0;32m--> 453\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    454\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    455\u001b[0m     \u001b[0;31m# Don't modify *func*'s signature, as boilerplate.py needs it.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1519\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1520\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1521\u001b[0;31m             return func(\n\u001b[0m\u001b[1;32m   1522\u001b[0m                 \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1523\u001b[0m                 \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, colorizer, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4898\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4899\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4900\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x and y must be the same size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4901\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4902\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: x and y must be the same size"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 400x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# help(.ravel)"],"metadata":{"id":"Ub5e7LylaN-t","executionInfo":{"status":"ok","timestamp":1749743897308,"user_tz":-540,"elapsed":6,"user":{"displayName":"김민주","userId":"13715885916761677384"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"WFmUY1QN3QnH"},"execution_count":null,"outputs":[]}]}